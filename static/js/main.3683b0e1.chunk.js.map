{"version":3,"sources":["components/MapContainer.js","components/Controls.js","components/App.js","serviceWorker.js","index.js","services/CityService.js"],"names":["MapContainer","props","className","Map","center","position","style","flex","zoom","TileLayer","attribution","url","geoJson","GeoJSON","data","undefined","loading","size","Option","Select","Controls","showSearch","value","selectedCity","disabled","onChange","evt","setCity","Object","keys","cities","map","c","key","name","selectedFrequency","setFrequency","frequencies","f","Group","setTime","target","selectedTime","times","t","Button","availableFrequencies","availableTimes","allday","night","App","state","city","time","frequency","this","setDisplay","shouldCancel","cityId","setState","cityService","getCityData","newCity","newFrequency","newTime","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","fetch","a","res","ok","Error","status","decodeAsync","body","decoded","createCityService","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3683b0e1.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet'\n\nimport './MapContainer.css'\nimport 'leaflet/dist/leaflet.css'\nimport { Spin } from 'antd'\n\nexport default function MapContainer(props) {\n  return (\n    <div className=\"Map\">\n      <Map center={props.position} style={{ flex: '1 1 auto' }} zoom={12}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {props.geoJson ? <GeoJSON data={props.geoJson} /> : undefined}\n      </Map>\n\n      {props.loading ? (\n        <div className=\"LoadingSpinner\">\n          <Spin size=\"large\" />\n        </div>\n      ) : undefined}\n    </div>\n  )\n}\n","import React from 'react'\n\nimport './Controls.css'\nimport { Select, Space, Radio } from 'antd'\n\nconst { Option } = Select\n\nexport default function Controls(props) {\n  return (\n    <div className=\"Controls\">\n      <Space>\n        <Select\n          className=\"CitySelect\"\n          showSearch\n          value={props.selectedCity}\n          disabled={props.disabled}\n          onChange={(evt) => props.setCity(evt)}\n        >\n          {Object.keys(props.cities).map((c) => (\n            <Option value={c} key={c}>\n              {props.cities[c].name}\n            </Option>\n          ))}\n        </Select>\n\n        <Select\n          className=\"FrequencySelect\"\n          value={props.selectedFrequency}\n          disabled={props.disabled}\n          onChange={(evt) => props.setFrequency(evt)}\n        >\n          {props.frequencies.map((f) => (\n            <Option value={f} key={f}>\n              Every {f} minutes\n            </Option>\n          ))}\n        </Select>\n\n        <Radio.Group\n          onChange={(evt) => props.setTime(evt.target.value)}\n          value={props.selectedTime}\n          disabled={props.disabled}\n        >\n          {Object.keys(props.times).map((t) => (\n            <Radio.Button key={t} value={t}>\n              {props.times[t]}\n            </Radio.Button>\n          ))}\n        </Radio.Group>\n      </Space>\n    </div>\n  )\n}\n","import React, { Component } from 'react'\n\nimport MapContainer from './MapContainer'\nimport Controls from './Controls'\n\nimport cities from './cities.json'\n\nimport './App.css'\n\nconst defaultCity = 'sydney'\nconst defaultTime = 'allday'\nconst defaultFrequency = 15\n\nconst availableFrequencies = [10, 15, 20]\n\nconst availableTimes = {\n  allday: 'All day',\n  night: 'Night',\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      city: defaultCity,\n      time: defaultTime,\n      frequency: defaultFrequency,\n      loading: true,\n      geoJson: undefined,\n    }\n  }\n\n  componentDidMount() {\n    this.setDisplay(defaultCity, defaultTime, defaultFrequency)\n  }\n\n  componentWillUnmount() {\n    this.shouldCancel = true\n  }\n\n  async setDisplay(cityId, time, frequency) {\n    this.setState({\n      ...this.state,\n      city: cityId,\n      time: time,\n      frequency: frequency,\n      loading: true,\n      geoJson: undefined,\n    })\n    const geoJson = await this.props.cityService.getCityData(\n      cityId,\n      time,\n      frequency\n    )\n\n    if (this.shouldCancel) {\n      return\n    }\n\n    this.setState({\n      ...this.state,\n      loading: false,\n      geoJson,\n    })\n  }\n\n  setCity(newCity) {\n    if (this.state.city === newCity) {\n      return\n    }\n\n    this.setDisplay(newCity, this.state.time, this.state.frequency)\n  }\n\n  setFrequency(newFrequency) {\n    if (this.state.frequency === newFrequency) {\n      return\n    }\n\n    this.setDisplay(this.state.city, this.state.time, newFrequency)\n  }\n\n  setTime(newTime) {\n    if (this.state.time === newTime) {\n      return\n    }\n\n    this.setDisplay(this.state.city, newTime, this.state.frequency)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Controls\n          cities={cities}\n          selectedCity={this.state.city}\n          setCity={(newCity) => this.setCity(newCity)}\n          frequencies={availableFrequencies}\n          selectedFrequency={this.state.frequency}\n          setFrequency={(f) => this.setFrequency(f)}\n          times={availableTimes}\n          selectedTime={this.state.time}\n          setTime={(newTime) => this.setTime(newTime)}\n          disabled={this.state.loading}\n        />\n        <MapContainer\n          position={cities[this.state.city].position}\n          geoJson={this.state.geoJson}\n          loading={this.state.loading}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport createCityService from './services/CityService'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App cityService={createCityService(fetch)} />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { decodeAsync } from '@msgpack/msgpack'\n\nexport default function (fetch) {\n  const getCityData = async (cityId, time, frequency) => {\n    const url = `cities/${cityId}-${time}-${frequency}mins.msg`\n    const res = await fetch(url)\n    if (!res.ok) {\n      throw new Error(`Tried to GET ${url}, returned status ${res.status}`)\n    }\n\n    const decoded = await decodeAsync(res.body)\n\n    return decoded\n  }\n\n  return {\n    getCityData,\n  }\n}\n"],"sourceRoot":""}